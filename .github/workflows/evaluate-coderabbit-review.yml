# Workflow name, displayed in the GitHub "Actions" tab
name: Evaluate CodeRabbit Review

# Trigger configuration: Run this workflow when a PR review is submitted
on:
  pull_request_review:
    types: [submitted]

# Define the jobs to be run
jobs:
  evaluate_codereview:
    # Condition to run the job:
    # 1. Only run if the review is created by 'coderabbitai' or 'coderabbitai[bot]'
    # 2. And the review must have a non-empty body
    if: >
      (github.event.review.user.login == 'coderabbitai' ||
       github.event.review.user.login == 'coderabbitai[bot]') &&
       (github.event.review.body != '')
       
    # Run on the latest Ubuntu environment
    runs-on: ubuntu-latest

    # Grant necessary permissions for the workflow
    permissions:
      contents: read
      pull-requests: read

    # Configure concurrency to prevent overlapping runs on the same PR
    concurrency:
      group: codereview-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    # The steps to be executed by the job
    steps:
      # Step 1: Ensure GitHub CLI is authenticated
      - name: Ensure gh is authenticated
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth status || gh auth login --with-token <<<"$GH_TOKEN"

      # Step 2: Fetch the latest CodeRabbit review and count keywords
      - name: Fetch latest CodeRabbit review and count keywords
        id: count_comments
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        shell: bash
        run: |
          set -euo pipefail

          # Get all reviews for the PR
          reviews_json="$(gh api repos/$OWNER/$REPO/pulls/$PR_NUMBER/reviews --paginate)"

          # Use jq to filter for the latest CodeRabbit review with a body
          latest_review="$(jq -r '
            [ .[]
              | select(.user.login=="coderabbitai" or .user.login=="coderabbitai[bot]")
              | select(.body != null and .body != "")
            ]
            | sort_by(.submitted_at)
            | last
          ' <<<"$reviews_json")"

          # If no review is found, exit early
          if [[ "$latest_review" == "null" || -z "$latest_review" ]]; then
            echo "No CodeRabbit reviews with body found on this PR."
            {
              echo "potential_count=0"
              echo "refactor_count=0"
              echo "review_id="
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi

          review_id="$(jq -r '.id' <<<"$latest_review")"
          echo "Latest CodeRabbit review id: $review_id"

          # Get the comments within that specific review
          comments_json="$(gh api repos/$OWNER/$REPO/pulls/$PR_NUMBER/reviews/$review_id/comments --paginate)"
          
          # Count the number of comments containing the keywords
          potential_count="$(jq '[ .[] | select(.body | strings | contains("⚠️ Potential issue")) ] | length' <<<"$comments_json")"
          refactor_count="$(jq  '[ .[] | select(.body | strings | contains("🛠️ Refactor suggestion")) ] | length' <<<"$comments_json")"

          echo "Potential issue count: $potential_count"
          echo "Refactor suggestion count: $refactor_count"

          # Write the results to the output for subsequent steps to use
          {
            echo "potential_count=$potential_count"
            echo "refactor_count=$refactor_count"
            echo "review_id=$review_id"
          } >> "$GITHUB_OUTPUT"

      # Step 3: Decide Pass/Fail based on the counts
      - name: Decide pass/fail
        env:
          POTENTIAL: ${{ steps.count_comments.outputs.potential_count }}
          REFACTOR: ${{ steps.count_comments.outputs.refactor_count }}
        run: |
          TOTAL=$(( ${POTENTIAL:-0} + ${REFACTOR:-0} ))
          echo "Decision based on counts -> potential: $POTENTIAL, refactor: $REFACTOR, total: $TOTAL"
          
          # Failure condition (the inverse of your merge requirements):
          # Fails IF (total > 4) OR (potential > 1)
          if [[ $TOTAL -gt 4 || ${POTENTIAL:-0} -gt 1 ]]; then
            echo "❌ Failing: Total issues ($TOTAL) > 4 or Potential issues ($POTENTIAL) > 1."
            exit 1
          else
            echo "✅ Passing: Counts are within the allowed thresholds."
          fi

      # Step 4: Post a job summary (always runs, regardless of previous step's success or failure)
      - name: Post job summary
        if: always()
        env:
          POTENTIAL: ${{ steps.count_comments.outputs.potential_count }}
          REFACTOR: ${{ steps.count_comments.outputs.refactor_count }}
          REVIEW_ID: ${{ steps.count_comments.outputs.review_id }}
          REPO_FULL: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          TOTAL=$(( ${POTENTIAL:-0} + ${REFACTOR:-0} ))
          {
            echo "### CodeRabbit Latest Review Check"
            echo ""
            echo "| Metric | Count |"
            echo "|---|---|"
            echo "| '⚠️ Potential issue' | **${POTENTIAL:-0}** |"
            echo "| '🛠️ Refactor suggestion' | **${REFACTOR:-0}** |"
            echo "| **Total Issues** | **$TOTAL** |"
            echo ""
            echo "**Merge Conditions:**"
            echo "- Total Issues ≤ 4"
            echo "- Potential Issues ≤ 1"
            echo ""
            # Failure condition in the summary report
            if [[ $TOTAL -gt 4 || ${POTENTIAL:-0} -gt 1 ]]; then
              echo "**Result:** ❌ **Fail** (Thresholds exceeded)"
            else
              echo "**Result:** ✅ **Success** (Within thresholds)"
            fi
            echo ""
            echo "PR: ${REPO_FULL}#${PR_NUMBER}"
            echo "Latest review ID: ${REVIEW_ID:-N/A}"
          } >> "$GITHUB_STEP_SUMMARY"