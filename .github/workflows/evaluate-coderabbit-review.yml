name: Auditor Review on Comment or Merge

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [closed]

jobs:
  auditor:
    if: |
      (github.event_name == 'issue_comment' && github.event.issue.pull_request != null && contains(github.event.comment.body, '/auditor review')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    concurrency:
      group: auditor-${{ (github.event.issue && github.event.issue.number) || (github.event.pull_request && github.event.pull_request.number) || github.run_id }}
      cancel-in-progress: true

    steps:
      - name: Auth
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth status || gh auth login --with-token <<<"$GH_TOKEN"

      - name: Resolve PR number
        id: pr
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "number=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          else
            echo "number=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Latest CodeRabbit review
        id: latest
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR: ${{ steps.pr.outputs.number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          r="$(gh api repos/$OWNER/$REPO/pulls/$PR/reviews --paginate)"
          latest="$(jq -r '
            [ .[] | select(.user.login=="coderabbitai" or .user.login=="coderabbitai[bot]") ]
            | sort_by(.submitted_at) | last
          ' <<<"$r")"
          if [[ -z "$latest" || "$latest" == "null" ]]; then
            echo "no_review=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "no_review=false" >> $GITHUB_OUTPUT
          echo "review_id=$(jq -r .id <<<"$latest")" >> $GITHUB_OUTPUT
          echo "submitted_at=$(jq -r .submitted_at <<<"$latest")" >> $GITHUB_OUTPUT

      - name: Unresolved threads after latest review
        id: unresolved
        if: steps.latest.outputs.no_review == 'false'
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR: ${{ steps.pr.outputs.number }}
          TS: ${{ steps.latest.outputs.submitted_at }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gql='
            query($owner:String!, $name:String!, $num:Int!) {
              repository(owner:$owner, name:$name) {
                pullRequest(number:$num) {
                  reviewThreads(first: 200) {
                    nodes {
                      isResolved
                      comments(first: 50) {
                        nodes {
                          author { login }
                          body
                          createdAt
                        }
                      }
                    }
                  }
                }
              }
            }'
          data="$(gh api graphql -f query="$gql" -f owner="$OWNER" -f name="$REPO" -F num="$PR")"
          u="$(jq --arg ts "$TS" '
            .data.repository.pullRequest.reviewThreads.nodes
            | map({
                isResolved,
                comments: (.comments.nodes
                  | map(select(.author.login=="coderabbitai" or .author.login=="coderabbitai[bot]")))
                  | map(select(.createdAt >= $ts))
              })
            | map(select((.comments | length) > 0))
            | map(select(.isResolved == false))
            | length
          ' <<<"$data")"
          echo "count=$u" >> $GITHUB_OUTPUT

      - name: Re-count keywords on latest review
        id: recount
        if: steps.latest.outputs.no_review == 'false' && steps.unresolved.outputs.count == '0'
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR: ${{ steps.pr.outputs.number }}
          RID: ${{ steps.latest.outputs.review_id }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          c="$(gh api repos/$OWNER/$REPO/pulls/$PR/reviews/$RID/comments --paginate)"
          p="$(jq '[ .[] | select(.body | strings | contains("‚ö†Ô∏è Potential issue")) ] | length' <<<"$c")"
          r="$(jq '[ .[] | select(.body | strings | contains("üõ†Ô∏è Refactor suggestion")) ] | length' <<<"$c")"
          echo "potential=$p" >> $GITHUB_OUTPUT
          echo "refactor=$r"   >> $GITHUB_OUTPUT

      - name: Add READY TO MERGE label
        if: steps.latest.outputs.no_review == 'false' && steps.unresolved.outputs.count == '0' && (fromJSON(steps.recount.outputs.potential) < 2) && (fromJSON(steps.recount.outputs.refactor) < 2)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr edit ${{ steps.pr.outputs.number }} --add-label "READY TO MERGE" || true

      - name: Fail with message
        if: steps.latest.outputs.no_review == 'false' && steps.unresolved.outputs.count == '0' && (fromJSON(steps.recount.outputs.potential) >= 2 || fromJSON(steps.recount.outputs.refactor) >= 2)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ steps.pr.outputs.number }} --body "All comments in the latest CodeRabbit review are resolved, but thresholds are exceeded. Please re-request CodeRabbit review."
          exit 1